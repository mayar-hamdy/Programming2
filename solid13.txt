from abc import ABC, abstractmethod  

# Define an abstract base class 'Shape'  
class Shape(ABC):  
    @abstractmethod  
    def area(self):  
        pass  

# Define a class 'Circle' that inherits from 'Shape'  
class Circle(Shape):  
    def __init__(self, radius):  
        self.radius = radius  

    # Implement the abstract method 'area'  
    def area(self):  
        return 3.14159 * self.radius ** 2  

# Define a class 'Rectangle' that inherits from 'Shape'  
class Rectangle(Shape):  
    def __init__(self, width, length):  
        self.width = width  
        self.length = length  

    # Implement the abstract method 'area'  
    def area(self):  
        return self.width * self.length  

# Create instances of 'Circle' and 'Rectangle'  
circle = Circle(5)  
rectangle = Rectangle(5, 7)  

# Calculate and print the area of the shapes  
print(circle.area())    # Output: 78.53975  
print(rectangle.area()) # Output: 35