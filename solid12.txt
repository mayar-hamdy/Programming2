from abc import ABC, abstractmethod  

# Define an interface for printable objects  
class Printable(ABC):  
    @abstractmethod  
    def format(self) -> str:  
        pass  

# Define a class that implements the Printable interface  
class Book(Printable):  
    def __init__(self, title: str, author: str, content: str):  
        self.title = title  
        self.author = author  
        self.content = content  

    # Implement the format method to return the book's content  
    def format(self) -> str:  
        return f"{self.title} by {self.author}\n{self.content}"  

# Define a high-level module that depends on the Printable interface  
class Printer:  
    def print(self, printable: Printable) -> None:  
        # Use the format method of the printable object  
        formatted_content = printable.format()  
        print(formatted_content)  

# Create a book object  
book = Book("The Hitchhiker's Guide to the Galaxy", "Douglas Adams", "Don't Panic.")  

# Create a printer object  
printer = Printer()  

# Print the book using the printer  
printer.print(book)